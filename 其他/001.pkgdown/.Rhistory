group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'SingleR')
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
install.packages('cli')
install.packages("cli")
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(celldex)
library(Seurat)
library(data.table)
library(cowplot)
library(ggplot2)
library(SingleR)
library(celldex)
library(DoubletFinder)
library(dplyr)
library(ggrepel)
all.inte <- readRDS('all.inte.rds')
ref <- celldex::HumanPrimaryCellAtlasData()
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
remove. packages('cli')
remove.packages('cli')
remove.packages(cli)
install.packages("cli")
devtools::install_github('dviraran/SingleR')
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
options(download.file.method="libcurl")
options(url.method="libcurl")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
options(download.file.method = 'libcurl')
options(url.method='libcurl')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
stringr::str_to_upper('aagcagcttcccatcgttcccttgttaatggtgcttgcgg')
stringr::str_to_upper('agccatcgactgtacaagcacttgctaacagggcattggc')
stringr::str_to_upper('ggcgtatggatgaactgtga')
1+NA
cor(c(1,2,3),c(1,2,3))
cor(c(1,2,3),c(1,2,NA))
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(“clusterProfiler”)
BiocManager::install(”clusterProfiler”)
BiocManager::install("clusterProfiler")
options(download.file.method = 'libcurl')
options(url.method='libcurl')
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler")
options(download.file.method = 'libcurl')
options(url.method='libcurl')
# single-cell analysis package
library(Seurat)
# plotting and data science packages
library(tidyverse)
library(cowplot)
library(patchwork)
# co-expression network analysis packages:
library(WGCNA)
library(hdWGCNA)
# gene enrichment packages
library(enrichR)
library(GeneOverlap)
# using the cowplot theme for ggplot
theme_set(theme_cowplot())
# set random seed for reproducibility
set.seed(12345)
# load the Zhou et al snRNA-seq dataset
seurat_obj <- readRDS('hdWGCNA_object.rds')
# enrichr databases to test
dbs <- c('GO_Biological_Process_2021','GO_Cellular_Component_2021','GO_Molecular_Function_2021')
# perform enrichment tests
seurat_obj <- RunEnrichr(
seurat_obj,
dbs=dbs, # character vector of enrichr databases to test
max_genes = 100 # number of genes per module to test
)
# retrieve the output table
enrich_df <- GetEnrichrTable(seurat_obj)
# make GO term plots:
EnrichrBarPlot(
seurat_obj,
outdir = "enrichr_plots", # name of output directory
n_terms = 10, # number of enriched terms to show (sometimes more show if there are ties!!!)
plot_size = c(5,7), # width, height of the output .pdfs
logscale=TRUE # do you want to show the enrichment as a log scale?
)
# enrichr dotplot
EnrichrDotPlot(
seurat_obj,
mods = "all", # use all modules (this is the default behavior)
database = "GO_Biological_Process_2021", # this has to be one of the lists we used above!!!
n_terms=1 # number of terms for each module
)
# compute cell-type marker genes with Seurat:
Idents(seurat_obj) <- seurat_obj$cell_type
markers <- Seurat::FindAllMarkers(
seurat_obj,
only.pos = TRUE,
logfc.threshold=1
)
# compute marker gene overlaps
overlap_df <- OverlapModulesDEGs(
seurat_obj,
deg_df = markers,
fc_cutoff = 1 # log fold change cutoff for overlap analysis
)
# overlap barplot, produces a plot for each cell type
plot_list <- OverlapBarPlot(overlap_df)
# stitch plots with patchwork
wrap_plots(plot_list, ncol=3)
# plot odds ratio of the overlap as a dot plot
OverlapDotPlot(
overlap_df,
plot_var = 'odds_ratio') +
ggtitle('Overlap of modules & cell-type markers')
setwd("F:/1.课题/1.神经环路/20230203/code")
library(Seurat)
library(ggplot2)
library(cowplot)
library(scales)
library(pheatmap)
library(dplyr)
library(MetaNeighbor)
library(SummarizedExperiment)
library(SingleCellExperiment)
library(Matrix)
library(ggsci)
library(ggrepel)
source('plot_function.R')
source('analysis_function.R')
Adult.Ex <- readRDS('../rds/4.Adult.Ex.rds')
head(Adult.Ex$MainType)
head(Adult.Ex$Ex_subtype)
DefaultAssay(Adult.Ex) <- 'RNA'
Idents(Adult.Ex) <- 'Ex_subtype'
Ex_subtype.marker <- FindAllMarkers(Adult.Ex, logfc.threshold = 0.5, only.pos = T)
write.csv(Ex_subtype.marker, '../result/Ex_subtype.marker.csv')
VlnPlot(Adult.Ex, features = c('Cux2','Etv1','Oprk1','Npr3','Pou3f1','Syt6','Foxp2','Tshz2','Nxph1'), split.by = "sample", group.by = "seurat_clusters", stack = TRUE, flip = TRUE, fill.by="ident", assay = 'RNA') +
NoLegend()
VlnPlot(Adult.Ex, features = c('Cux2','Etv1','Oprk1','Npr3','Pou3f1','Syt6','Foxp2','Tshz2','Nxph1'), group.by = "Ex_subtype", stack = TRUE, flip = TRUE, fill.by="ident", assay = 'RNA') +
NoLegend()
VlnPlot(Adult.Ex, features = c('Syt6','Foxp2','Cux2','Etv1','Oprk1','Npr3','Pou3f1','Tshz2','Nxph1'), group.by = "Ex_subtype", stack = TRUE, flip = TRUE, fill.by="ident", assay = 'RNA') +
NoLegend()
VlnPlot(Adult.Ex, features = c('Syt6','Foxp2','Slc30a3','Etv1','Oprk1','Npr3','Pou3f1','Tshz2','Nxph1'), group.by = "Ex_subtype", stack = TRUE, flip = TRUE, fill.by="ident", assay = 'RNA') +
NoLegend()
VlnPlot(Adult.Ex, features = c('Syt6','Foxp2','Calb1','Etv1','Oprk1','Npr3','Pou3f1','Tshz2','Nxph1'), group.by = "Ex_subtype", stack = TRUE, flip = TRUE, fill.by="ident", assay = 'RNA') +
NoLegend()
VlnPlot(Adult.Ex, features = c('Syt6','Foxp2','Calb1','Cux2','Npr3','Pou3f1','Tshz2','Nxph1'), group.by = "Ex_subtype", stack = TRUE, flip = TRUE, fill.by="ident", assay = 'RNA') +
NoLegend()
VlnPlot(Adult.Ex, features = c('Syt6','Foxp2','Calb1','Cux2','Tshz2','Nxph1','Npr3','Pou3f1'), group.by = "Ex_subtype", stack = TRUE, flip = TRUE, fill.by="ident", assay = 'RNA') +
NoLegend()
library(Rtsne)
library(Seurat)
library(ggplot2)
library(pheatmap)
Adult.PT.barcode <- readRDS('../rds/9.Adult.PT.barcode.rds')
Adult.PT <- readRDS('../rds/8.Adult.PT.rds')
Barcode <- c("ACB-C","ACB-I","AId-C","AId-I","AUD-I","BLA-C","BLA-I","CP-C","CP-I","DR","ECT-C","ECT-I","ENTl-C","ENTl-I","LHA-I","MD-I","PL-C","RE-I","RSP-C","RSP-I","SC-I","SSp-I", "VIS-I","VTA-I")
PT_Barcode <- c("DR","LHA-I","MD-I","RE-I","SC-I","VTA-I")
BC_num <- table(Adult.PT$BC_num)[-1]
BC_num
head(Adult.PT)
PT_subtype <- c('PT1','PT2')
plist <- list()
for (i in 1:2){
seu <- subset(Adult.PT,
cells=colnames(Adult.PT)[which(Adult.PT$PT_subtype==PT_subtype[i])])
BC_num <- table(seu$BC_num)[-1]
BC_num1to9 <- BC_num[1:9]
x <- BC_num/sum(BC_num)
labels <- paste(names(x),' targets', ' (', round(x,3)*100, '%,', BC_num, ')', sep = '')
plist[[i]] <- Bior_pie(x = x, labels = labels, col = hue_pal()(10))
}
plot_grid(plotlist = plist, ncol = 2)
plist[[1]]
source('plot_function.R')
PT_subtype <- c('PT1','PT2')
plist <- list()
for (i in 1:2){
seu <- subset(Adult.PT,
cells=colnames(Adult.PT)[which(Adult.PT$PT_subtype==PT_subtype[i])])
BC_num <- table(seu$BC_num)[-1]
BC_num1to9 <- BC_num[1:9]
x <- BC_num/sum(BC_num)
labels <- paste(names(x),' targets', ' (', round(x,3)*100, '%,', BC_num, ')', sep = '')
plist[[i]] <- Bior_pie(x = x, labels = labels, col = hue_pal()(10))
}
plot_grid(plotlist = plist, ncol = 2)
Bior_pie(x = x, labels = labels, col = hue_pal()(10))
hue_pal()(10)
x
labels
library(cowplot)
plot_grid(plotlist = plist, ncol = 2)
Bior_pie <- function(x, labels, col=pal_d3("category20,",alpha=0.7)(20), title="",
fontsize=20, legend.key.size=1){
df <- data.frame(values=x, labels=labels)
df$labels <- factor(df$labels,levels=labels)
ggplot(df, aes(x='', y=values, fill=labels)) +
geom_bar(stat='identity')+
coord_polar(theta='y')+
theme_void() +
labs(title=title) +
theme(text=element_text(size=fontsize), plot.title=element_text(hjust=0.5),
legend.title=element_blank(), legend.key.size=unit(legend.key.size, "cm")) +
scale_fill_manual(values=col)
}
Bior_pie(x = x, labels = labels, col = hue_pal()(10))
df <- data.frame(values=x, labels=labels)
df
df$labels <- factor(df$labels,levels=labels)
df
x
labels
PT_subtype <- c('PT1','PT2')
plist <- list()
for (i in 1:2){
seu <- subset(Adult.PT,
cells=colnames(Adult.PT)[which(Adult.PT$PT_subtype==PT_subtype[i])])
BC_num <- table(seu$BC_num)[-1]
BC_num1to9 <- BC_num[1:9]
x <- BC_num/sum(BC_num)
labels <- paste(names(x),' targets', ' (', round(x,3)*100, '%,', BC_num, ')', sep = '')
plist[[i]] <- Bior_pie(x = as.numeric(x), labels = labels, col = hue_pal()(10))
}
plot_grid(plotlist = plist, ncol = 2)
plot_grid(plotlist = plist, ncol = 2)
plot_grid(plotlist = plist, ncol = 2)
plot_grid(plotlist = plist, ncol = 2)
plot_grid(plotlist = plist, ncol = 2)
PT_subtype <- c('PT1','PT2')
plist <- list()
for (i in 1:2){
seu <- subset(Adult.PT,
cells=colnames(Adult.PT)[which(Adult.PT$PT_subtype==PT_subtype[i])])
BC_num <- table(seu$BC_num)[-1]
BC_num1to9 <- BC_num[1:9]
x <- BC_num/sum(BC_num)
labels <- paste(names(x),' targets', ' (', round(x,3)*100, '%,', BC_num, ')', sep = '')
plist[[i]] <- Bior_pie(x = as.numeric(x), labels = labels, col = hue_pal()(10)) +
labs(title = PT_subtype[i])
}
plot_grid(plotlist = plist, ncol = 2)
PT_subtype <- c('PT1','PT2')
plist <- list()
for (i in 1:2){
seu <- subset(Adult.PT,
cells=colnames(Adult.PT)[which(Adult.PT$PT_subtype==PT_subtype[i])])
BC_num <- table(seu$BC_num)[-1]
BC_num1to9 <- BC_num[1:9]
x <- BC_num/sum(BC_num)
labels <- paste(names(x),' targets', ' (', round(x,3)*100, '%,', BC_num, ')', sep = '')
plist[[i]] <- Bior_pie(x = as.numeric(x), labels = labels,
col = pal_d3("category20")(20)[11:20]) +
labs(title = PT_subtype[i])
}
plot_grid(plotlist = plist, ncol = 2)
PT_mat <- table(Adult.PT.barcode$Proj_cluster,Adult.PT.barcode$PT_subtype)
Adult.Ex.barcode <- readRDS('../rds/5.Adult.Ex.barcode.rds')
Adult.PT.barcode <- subset(Adult.PT,cells=colnames(Adult.PT)[which(Adult.PT$BC_num>0)])
Adult.PT.barcode$Proj_cluster <- Adult.Ex.barcode$Proj_cluster[match(colnames(Adult.PT.barcode),colnames(Adult.Ex.barcode))]
PT_mat <- table(Adult.PT.barcode$Proj_cluster,Adult.PT.barcode$PT_subtype)
PT_mat <- PT_mat[order(rowSums(PT_mat),decreasing = T),]
df <- Bior_Dim2to1(PT_mat)
df$row <- factor(df$row, levels = rownames(PT_mat))
ggplot(data=df, aes(x=row, y=value, fill=col)) +
geom_bar(stat="identity", width=0.7) +
theme_classic() +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) +
labs(x='', y='')
PT_mat <- PT_mat[which(rowSums(PT_mat)>20),]
PT_mat_norm <- apply(PT_mat, 1, function(x){x/sum(x)})
df <- Bior_Dim2to1(PT_mat_norm)
df$col <- factor(df$col, levels = colnames(PT_mat_norm))
ggplot(data=df, aes(x=col, y=value, fill=row)) +
geom_bar(stat="identity", width=0.7) +
theme_classic() +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) +
labs(x='', y='')
df
df <- Bior_Dim2to1(PT_mat_norm)
df
df[which(df$row=='PT1'),]
df[which(df$row=='PT1'),'value']
sort(df[which(df$row=='PT1'),'value'])
order(df[which(df$row=='PT1'),'value'])
df$col[order(df[which(df$row=='PT1'),'value'])]
PT_mat <- PT_mat[which(rowSums(PT_mat)>20),]
PT_mat_norm <- apply(PT_mat, 1, function(x){x/sum(x)})
df <- Bior_Dim2to1(PT_mat_norm)
df$col <- factor(df$col, levels = df$col[order(df[which(df$row=='PT1'),'value'])])
ggplot(data=df, aes(x=col, y=value, fill=row)) +
geom_bar(stat="identity", width=0.7) +
theme_classic() +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) +
labs(x='', y='')
PT_mat <- PT_mat[which(rowSums(PT_mat)>20),]
PT_mat_norm <- apply(PT_mat, 1, function(x){x/sum(x)})
df <- Bior_Dim2to1(PT_mat_norm)
df$col <- factor(df$col, levels = df$col[order(df[which(df$row=='PT1'),'value'],decreasing = T)])
ggplot(data=df, aes(x=col, y=value, fill=row)) +
geom_bar(stat="identity", width=0.7) +
theme_classic() +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) +
labs(x='', y='')
Barcode <- c("ACB-C","ACB-I","AId-C","AId-I","AUD-I","BLA-C","BLA-I","CP-C","CP-I","DR","ECT-C","ECT-I","ENTl-C","ENTl-I","LHA-I","MD-I","PL-C","RE-I","RSP-C","RSP-I","SC-I","SSp-I", "VIS-I","VTA-I")
PT_Barcode <- c("DR","LHA-I","MD-I","RE-I","SC-I","VTA-I")
mat <- matrix(nrow = 2, ncol = length(PT_Barcode))
rownames(mat) <- sort(unique(Adult.PT.barcode$PT_subtype))
colnames(mat) <- PT_Barcode
for (i in 1:2){
for (j in 1:length(PT_Barcode)){
mat[i,j] <- length(which(Adult.PT.barcode@meta.data[,PT_Barcode[j]]>0 &
Adult.PT.barcode$PT_subtype == rownames(mat)[i]))
}
}
df <- Bior_Dim2to1(mat)
df$col <- factor(df$col,
levels = colnames(mat)[order(colSums(mat), decreasing = T)])
ggplot(data=df, aes(x=col, y=value, fill=row)) +
geom_bar(stat="identity", width=0.7) +
theme_classic() +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) +
labs(x='', y='')
df <- Bior_Dim2to1(mat)
df
mat
mat <- mat/colSums(mat)
mat
mat <- matrix(nrow = 2, ncol = length(PT_Barcode))
rownames(mat) <- sort(unique(Adult.PT.barcode$PT_subtype))
colnames(mat) <- PT_Barcode
for (i in 1:2){
for (j in 1:length(PT_Barcode)){
mat[i,j] <- length(which(Adult.PT.barcode@meta.data[,PT_Barcode[j]]>0 &
Adult.PT.barcode$PT_subtype == rownames(mat)[i]))
}
}
mat <- apply(mat,2,function(x){x/sum(x)})
df <- Bior_Dim2to1(mat)
df$col <- factor(df$col,
levels = colnames(mat)[order(colSums(mat), decreasing = T)])
mat
mat['PT1',]
order(mat['PT1',],decreasing = T)
colnames(mat)[order(mat['PT1',],decreasing = T)]
mat <- matrix(nrow = 2, ncol = length(PT_Barcode))
rownames(mat) <- sort(unique(Adult.PT.barcode$PT_subtype))
colnames(mat) <- PT_Barcode
for (i in 1:2){
for (j in 1:length(PT_Barcode)){
mat[i,j] <- length(which(Adult.PT.barcode@meta.data[,PT_Barcode[j]]>0 &
Adult.PT.barcode$PT_subtype == rownames(mat)[i]))
}
}
mat <- apply(mat,2,function(x){x/sum(x)})
df <- Bior_Dim2to1(mat)
df$col <- factor(df$col,
levels = colnames(mat)[order(mat['PT1',],decreasing = T)])
ggplot(data=df, aes(x=col, y=value, fill=row)) +
geom_bar(stat="identity", width=0.7) +
theme_classic() +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) +
labs(x='', y='')
mat <- matrix(nrow = 2, ncol = length(PT_Barcode))
rownames(mat) <- sort(unique(Adult.PT.barcode$PT_subtype))
colnames(mat) <- PT_Barcode
for (i in 1:2){
for (j in 1:length(PT_Barcode)){
mat[i,j] <- length(which(Adult.PT.barcode@meta.data[,PT_Barcode[j]]>0 &
Adult.PT.barcode$PT_subtype == rownames(mat)[i]))
}
}
#mat <- apply(mat,2,function(x){x/sum(x)})
df <- Bior_Dim2to1(mat)
df$col <- factor(df$col,
levels = colnames(mat)[order(mat['PT1',],decreasing = T)])
ggplot(data=df, aes(x=col, y=value, fill=row)) +
geom_bar(stat="identity", width=0.7) +
theme_classic() +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) +
labs(x='', y='')
FeaturePlot(Adult.PT,
reduction = 'umap',
c('Npnt','Sema3c',
'Nnat','Nos1',),
ncol = 4,
cols=c("lightgrey", "red"),
min.cutoff='q2')
FeaturePlot(Adult.PT,
reduction = 'umap',
c('Npnt','Sema3c','Nnat','Nos1',),
ncol = 4,
cols=c("lightgrey", "red"),
min.cutoff='q2')
FeaturePlot(Adult.PT,
reduction = 'umap',
c('Npnt','Sema3c','Nnat','Nos1'),
ncol = 4,
cols=c("lightgrey", "red"),
min.cutoff='q2')
FeaturePlot(Adult.PT,
reduction = 'umap',
c('Npnt','Sema3c','Nnat','Nos1'),
ncol = 4,
cols=c("lightgrey", "red"),
min.cutoff='q2')
FeaturePlot(Adult.PT,
cells=colnames(Adult.PT)[which(Adult.PT@reductions$umap@cell.embeddings[,2] < -5)],
reduction = 'umap',
c('Npnt','Sema3c','Nnat','Nos1'),
ncol = 4,
cols=c("lightgrey", "red"),
min.cutoff='q2')
FeaturePlot(Adult.PT,
cells=colnames(Adult.PT)[which(Adult.PT@reductions$umap@cell.embeddings[,2] < -5)],
reduction = 'umap',
c('Npnt','Sema3c','Nnat','Nos1'),
ncol = 4,
cols=c("lightgrey", "red"),
min.cutoff='q2')
FeaturePlot(Adult.PT,
cells=colnames(Adult.PT)[which(Adult.PT@reductions$umap@cell.embeddings[,2] < -5)],
reduction = 'umap',
c('Npnt','Sema3c','Nnat','Nos1'),
ncol = 2,
cols=c("lightgrey", "red"),
min.cutoff='q2')
FeaturePlot(Adult.PT,
cells=colnames(Adult.PT)[which(Adult.PT@reductions$umap@cell.embeddings[,2] < -5)],
reduction = 'umap',
c('Npnt','Sema3c','Nnat','Nos1'),
ncol = 2,
cols=c("lightgrey", "red"),
min.cutoff='q2')
FeaturePlot(Adult.PT,
cells=colnames(Adult.PT)[which(Adult.PT@reductions$umap@cell.embeddings[,2] < -5)],
reduction = 'umap',
c('Npnt','Sema3c','Nnat','Nos1'),
ncol = 2,
cols=c("lightgrey", "red"),
min.cutoff='q2')
setwd("F:/1.课题/1.神经环路/20230203/code")
setwd("F:/Github/Bioinformatics-Tools/其他/001.pkgdown")
usethis::use_pkgdown()
