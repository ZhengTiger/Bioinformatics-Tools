p_allen <- pheatmap(allen_proj_merge[row_order,],
cluster_rows = T, cluster_cols = T,
breaks = seq(0,0.5,0.01),
color = colorRampPalette(c("navy", "white","firebrick3"))(50))
inject_area <- c('RSP','ENT','AId','VIS','AUD','SSp','ECT','BLA')
proj_area <- c('SSp','AUD','VIS','AId','RSP','ECT','ENT','BLA','CP','ACB')
module1 <- c('VIS','RSP','SSp','AUD','CP')
module2 <- c('AId','ACB','ECT','ENT','BLA')
link <- matrix(nrow = length(inject_area)*length(proj_area), ncol = 6)
colnames(link) <- c('areaA','moduleA','areaB','moduleB','value','type')
index <- 1
for (i in 1:length(inject_area)){
for (j in 1:length(proj_area)){
link[index,'areaA'] <- inject_area[i]
if (inject_area[i] %in% module1){
link[index,'moduleA'] <- 'module1'
}else{
link[index,'moduleA'] <- 'module2'
}
link[index,'areaB'] <- proj_area[j]
if (proj_area[i] %in% module1){
link[index,'moduleB'] <- 'module1'
}else{
link[index,'moduleB'] <- 'module2'
}
link[index,'value'] <- allen_proj_merge[inject_area[i],proj_area[j]]
if (link[index,'moduleA']==link[index,'moduleB']){
link[index,'type'] <- 'within module'
}else{
link[index,'type'] <- 'across module'
}
index <- index + 1
}
}
library(tidyverse)
library(viridis)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)
library(tidyverse)
library(viridis)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)
unique(link$type)
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")))
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
install.packages('htmltools')
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
install.packages("htmltools")
library(Seurat)
library(data.table)
library(cowplot)
library(ggplot2)
library(SingleR)
library(celldex)
library(DoubletFinder)
library(dplyr)
library(ggrepel)
ref <- celldex::HumanPrimaryCellAtlasData()
ref <- celldex::HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
all.inte <- readRDS('all.inte.rds')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'Maintype')
all.inte <- FindClusters(all.inte, resolution = 0.8)
DefaultAssay(all.inte) <- 'inte'
DefaultAssay(all.inte) <- 'integrated'
all.inte <- FindClusters(all.inte, resolution = 0.8)
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
all.inte <- FindNeighbors(all.inte, reduction = "pca", dims = 1:30)
all.inte <- FindClusters(all.inte, resolution = 1)
all.inte <- RunUMAP(all.inte, reduction = "pca", dims = 1:30)
all.inte <- RunTSNE(all.inte, reduction = "pca", dims = 1:30)
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
head(all.inte)
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'SingleR')
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
install.packages('cli')
install.packages("cli")
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(celldex)
library(Seurat)
library(data.table)
library(cowplot)
library(ggplot2)
library(SingleR)
library(celldex)
library(DoubletFinder)
library(dplyr)
library(ggrepel)
all.inte <- readRDS('all.inte.rds')
ref <- celldex::HumanPrimaryCellAtlasData()
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
remove. packages('cli')
remove.packages('cli')
remove.packages(cli)
install.packages("cli")
devtools::install_github('dviraran/SingleR')
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
options(download.file.method="libcurl")
options(url.method="libcurl")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
options(download.file.method = 'libcurl')
options(url.method='libcurl')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
stringr::str_to_upper('aagcagcttcccatcgttcccttgttaatggtgcttgcgg')
stringr::str_to_upper('agccatcgactgtacaagcacttgctaacagggcattggc')
stringr::str_to_upper('ggcgtatggatgaactgtga')
1+NA
cor(c(1,2,3),c(1,2,3))
cor(c(1,2,3),c(1,2,NA))
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(“clusterProfiler”)
BiocManager::install(”clusterProfiler”)
BiocManager::install("clusterProfiler")
options(download.file.method = 'libcurl')
options(url.method='libcurl')
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler")
options(download.file.method = 'libcurl')
options(url.method='libcurl')
# single-cell analysis package
library(Seurat)
# plotting and data science packages
library(tidyverse)
library(cowplot)
library(patchwork)
# co-expression network analysis packages:
library(WGCNA)
library(hdWGCNA)
# gene enrichment packages
library(enrichR)
library(GeneOverlap)
# using the cowplot theme for ggplot
theme_set(theme_cowplot())
# set random seed for reproducibility
set.seed(12345)
# load the Zhou et al snRNA-seq dataset
seurat_obj <- readRDS('hdWGCNA_object.rds')
# enrichr databases to test
dbs <- c('GO_Biological_Process_2021','GO_Cellular_Component_2021','GO_Molecular_Function_2021')
# perform enrichment tests
seurat_obj <- RunEnrichr(
seurat_obj,
dbs=dbs, # character vector of enrichr databases to test
max_genes = 100 # number of genes per module to test
)
# retrieve the output table
enrich_df <- GetEnrichrTable(seurat_obj)
# make GO term plots:
EnrichrBarPlot(
seurat_obj,
outdir = "enrichr_plots", # name of output directory
n_terms = 10, # number of enriched terms to show (sometimes more show if there are ties!!!)
plot_size = c(5,7), # width, height of the output .pdfs
logscale=TRUE # do you want to show the enrichment as a log scale?
)
# enrichr dotplot
EnrichrDotPlot(
seurat_obj,
mods = "all", # use all modules (this is the default behavior)
database = "GO_Biological_Process_2021", # this has to be one of the lists we used above!!!
n_terms=1 # number of terms for each module
)
# compute cell-type marker genes with Seurat:
Idents(seurat_obj) <- seurat_obj$cell_type
markers <- Seurat::FindAllMarkers(
seurat_obj,
only.pos = TRUE,
logfc.threshold=1
)
# compute marker gene overlaps
overlap_df <- OverlapModulesDEGs(
seurat_obj,
deg_df = markers,
fc_cutoff = 1 # log fold change cutoff for overlap analysis
)
# overlap barplot, produces a plot for each cell type
plot_list <- OverlapBarPlot(overlap_df)
# stitch plots with patchwork
wrap_plots(plot_list, ncol=3)
# plot odds ratio of the overlap as a dot plot
OverlapDotPlot(
overlap_df,
plot_var = 'odds_ratio') +
ggtitle('Overlap of modules & cell-type markers')
devtools::install_github("tractatus/wholebrain", INSTALL_opts=c("--no-multiarch"))
devtools::install_github("tractatus/wholebrain", INSTALL_opts=c("--no-multiarch"))
library(ggplot2)
devtools::install_github("tractatus/wholebrain", args="--no-multiarch")
devtools::install_github("tractatus/wholebrain", dependencies = TRUE, INSTALL_opts = c("--no-multiarch"))
remotes::install_github("tractatus/wholebrain", dependencies = TRUE, INSTALL_opts = c("--no-multiarch"))
library(rstan)
model<-'data{
int N;
real y[N];
}
parameters{
real mu;
real sigma;
}
model{
y ~ normal(mu, sigma);
}'
model_data <- list( y = rnorm(10), N = 10  )
fit <- stan(model_code = model, data = model_data, iter = 4000, chains =4)
install.packages("survminer")
install.packages('Seurat')
setwd("F:/Github/Bioinformatics-Tools/机器学习深度学习/001.XGBoost")
# run the model with built-in data
suppressPackageStartupMessages({
library("SHAPforxgboost"); library("ggplot2"); library("xgboost")
library("data.table"); library("here")
})
y_var <-  "diffcwv"
dataX <- as.matrix(dataXY_df[,-..y_var])
# hyperparameter tuning results
param_list <- list(objective = "reg:squarederror",  # For regression
eta = 0.02,
max_depth = 10,
gamma = 0.01,
subsample = 0.95
)
mod <- xgboost::xgboost(data = dataX,
label = as.matrix(dataXY_df[[y_var]]),
params = param_list, nrounds = 10,
verbose = FALSE, nthread = parallel::detectCores() - 2,
early_stopping_rounds = 8)
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod, X_train = dataX)
# The ranked features by mean |SHAP|
shap_values$mean_shap_score
#| warning: false
# run the model with built-in data
suppressPackageStartupMessages({
library("SHAPforxgboost"); library("ggplot2"); library("xgboost")
library("data.table"); library("here")
})
y_var <-  "diffcwv"
dataX <- as.matrix(dataXY_df[,-..y_var])
# hyperparameter tuning results
param_list <- list(objective = "reg:squarederror",  # For regression
eta = 0.02,
max_depth = 10,
gamma = 0.01,
subsample = 0.95
)
mod <- xgboost::xgboost(data = dataX,
label = as.matrix(dataXY_df[[y_var]]),
params = param_list, nrounds = 10,
verbose = FALSE, nthread = parallel::detectCores() - 2,
early_stopping_rounds = 8)
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod, X_train = dataX)
# The ranked features by mean |SHAP|
shap_values$mean_shap_score
# to show that `rowSum` is the output:
shap_data <- copy(shap_values$shap_score)
shap_data[, BIAS := shap_values$BIAS0]
pred_mod <- predict(mod, dataX, ntreelimit = 10)
shap_data[, `:=`(rowSum = round(rowSums(shap_data),6), pred_mod = round(pred_mod,6))]
rmarkdown::paged_table(shap_data[1:20,])
#| warning: false
# to show that `rowSum` is the output:
shap_data <- copy(shap_values$shap_score)
shap_data[, BIAS := shap_values$BIAS0]
pred_mod <- predict(mod, dataX, ntreelimit = 10)
shap_data[, `:=`(rowSum = round(rowSums(shap_data),6), pred_mod = round(pred_mod,6))]
rmarkdown::paged_table(shap_data[1:20,])
library(xgboost)
d <- data.table::as.data.table(cbind(Fever = c(0,0,1,1), Cough = c(0,1,0,1), y = c(0,0,0,80)))
knitr::kable(d)
X1 = as.matrix(d[,.(Fever, Cough)])
X2 = as.matrix(d[,.(Cough, Fever)])
m1 = xgboost(
data = X1, label = d$y,base_score = 0, gamma = 0, eta = 1, lambda = 0,nrounds = 1, verbose = F)
m2 = xgboost(
data = X2, label = d$y,base_score = 0, gamma = 0, eta = 1, lambda = 0,nrounds = 1, verbose = F)
xgb.importance(model = m1)
xgb.importance(model = m2)
shap_values <- shap.values(xgb_model = m1, X_train = X1)
shap_values <- shap.values(xgb_model = m1, X_train = X1)
shap_values$mean_shap_score
shap_values <- shap.values(xgb_model = m1, X_train = X1)
shap_values$shap_score
shap_values <- shap.values(xgb_model = m1, X_train = X1)
shap_values$shap_score
shap_values$shap_score
shap_values$BIAS0
shap_values$mean_shap_score
shap_values <- shap.prep(xgb_model = m1, X_train = X1)
shap_values$mean_value
shap_values$value
shap_values$stdfvalue
shap_values <- shap.values(xgb_model = m1, X_train = X1)
m1$evaluation_log
m1$raw
X1
shap.values(xgb_model = m1, X_train = X1)
shap.prep(xgb_model = m1, X_train = X1)
shap.importance(xgb_model = m1, X_train = X1)
# To prepare the long-format data:
shap_long <- shap.prep(xgb_model = mod, X_train = dataX)
# is the same as: using given shap_contrib
shap_long <- shap.prep(shap_contrib = shap_values$shap_score, X_train = dataX)
#| warning: false
# run the model with built-in data
suppressPackageStartupMessages({
library("SHAPforxgboost"); library("ggplot2"); library("xgboost")
library("data.table"); library("here")
})
y_var <-  "diffcwv"
dataX <- as.matrix(dataXY_df[,-..y_var])
# hyperparameter tuning results
param_list <- list(objective = "reg:squarederror",  # For regression
eta = 0.02,
max_depth = 10,
gamma = 0.01,
subsample = 0.95
)
mod <- xgboost::xgboost(data = dataX,
label = as.matrix(dataXY_df[[y_var]]),
params = param_list, nrounds = 10,
verbose = FALSE, nthread = parallel::detectCores() - 2,
early_stopping_rounds = 8)
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod, X_train = dataX)
# The ranked features by mean |SHAP|
shap_values$mean_shap_score
# To prepare the long-format data:
shap_long <- shap.prep(xgb_model = mod, X_train = dataX)
# is the same as: using given shap_contrib
shap_long <- shap.prep(shap_contrib = shap_values$shap_score, X_train = dataX)
# **SHAP summary plot**
shap.plot.summary(shap_long)
g1 <- shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV') + ggtitle("(A) SHAP values of Time trend vs. Time trend")
g2 <- shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'Column_WV', color_feature = 'Column_WV') +  ggtitle("(B) SHAP values of CWV vs. Time trend")
gridExtra::grid.arrange(g1, g2, ncol = 2)
fig_list <- lapply(names(shap_values$mean_shap_score)[1:4],
shap.plot.dependence, data_long = shap_long)
gridExtra::grid.arrange(grobs = fig_list, ncol = 2)
