X_test <- Matrix(X[-trainIndex,], sparse = T)
y_test <- as.integer(y[-trainIndex])
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
head(y_test)
# 用 交叉验证 来对模型进行自动验证，找到最适合的迭代次数
cv <- xgb.cv(data = dtrain, nrounds = 1000, nfold = 5, metrics="merror", early_stopping_rounds=10, max_depth = 5, eta = 0.5, objective = "binary:logistic")
y_test
# caret 划分训练集和测试集，保留数据分布
set.seed(20230511)
X <- gene_mat
y <- label
trainIndex <- createDataPartition(y, p = .7, list = FALSE, times = 1)
X_train <- Matrix(X[trainIndex,], sparse = T)
y_train <- as.numeric(y[trainIndex])
X_test <- Matrix(X[-trainIndex,], sparse = T)
y_test <- as.numeric(y[-trainIndex])
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
y_test
# caret 划分训练集和测试集，保留数据分布
set.seed(20230511)
X <- gene_mat
y <- label
trainIndex <- createDataPartition(y, p = .7, list = FALSE, times = 1)
X_train <- Matrix(X[trainIndex,], sparse = T)
y_train <- y[trainIndex]
X_test <- Matrix(X[-trainIndex,], sparse = T)
y_test <- y[-trainIndex]
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
y_test
# 用 交叉验证 来对模型进行自动验证，找到最适合的迭代次数
cv <- xgb.cv(data = dtrain, nrounds = 1000, nfold = 5, metrics="merror", early_stopping_rounds=10, max_depth = 5, eta = 0.5, objective = "binary:logistic")
head(y[trainIndex])
head(as.integer(y[trainIndex]))
# caret 划分训练集和测试集，保留数据分布
set.seed(20230511)
X <- gene_mat
y <- label
trainIndex <- createDataPartition(y, p = .7, list = FALSE, times = 1)
X_train <- Matrix(X[trainIndex,], sparse = T)
y_train <- as.integer(y[trainIndex]) -1
X_test <- Matrix(X[-trainIndex,], sparse = T)
y_test <- as.integer(y[-trainIndex]) -1
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
table(y_test)
# 用 交叉验证 来对模型进行自动验证，找到最适合的迭代次数
cv <- xgb.cv(data = dtrain, nrounds = 1000, nfold = 5, metrics="merror", early_stopping_rounds=10, max_depth = 5, eta = 0.5, objective = "binary:logistic")
# 用 交叉验证 来对模型进行自动验证，找到最适合的迭代次数
cv <- xgb.cv(data = dtrain, nrounds = 1000, nfold = 5, early_stopping_rounds=10, max_depth = 5, eta = 0.5, objective = "binary:logistic")
# 用 交叉验证 来对模型进行自动验证，找到最适合的迭代次数
cv <- xgb.cv(data = dtrain, nrounds = 1000, nfold = 5, early_stopping_rounds=5, max_depth = 5, eta = 0.5, objective = "binary:logistic")
cv$best_iteration
cv$best_ntreelimit
# 训练模型
model_xgb <- xgboost(data=dtrain, max_depth=5, eta=0.5, nthread = 5, nround=cv$best_iteration, objective='binary:logistic')
# 预测
pre <- predict(model_xgb, newdata=dtest)
xgb.cf <-caret::confusionMatrix(as.factor(pre),as.factor(y_test))
head(pre)
# 预测
pre <- predict(model_xgb, newdata=dtest)
xgboost_roc <- roc(y_test, as.numeric(pre))
plot(xgboost_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='xgboost模型ROC曲线')
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
library(Seurat)
library(caret)
library(xgboost)
library(Matrix)
library(pROC)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
library(PRROC)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate')
PRROC_obj
?plot
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', title='PT')
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main ='PT')
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main = 'PT')
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main = 'PT')
seu <- seu_Adult1
# 提取 3000 个高变gene
DefaultAssay(seu) <- 'RNA'
seu_ML <- FindVariableFeatures(seu, nfeatures = 3000)
HVGs <- VariableFeatures(seu)
gene_mat <- t(as.matrix(seu@assays$RNA@data[HVGs,]))
# 投射模块标签
label <- rep(0,ncol(seu))
label[which(seu$Proj_module != 'PT')] <- 1
label <- factor(label, levels = c(0,1))
# caret 划分训练集和测试集，保留数据分布
set.seed(20230511)
X <- gene_mat
y <- label
trainIndex <- createDataPartition(y, p = .7, list = FALSE, times = 1)
X_train <- Matrix(X[trainIndex,], sparse = T)
y_train <- as.integer(y[trainIndex]) -1
X_test <- Matrix(X[-trainIndex,], sparse = T)
y_test <- as.integer(y[-trainIndex]) -1
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
# 用 交叉验证 来对模型进行自动验证，找到最适合的迭代次数
cv <- xgb.cv(data = dtrain, nrounds = 1000, nfold = 5, early_stopping_rounds=5, max_depth = 5, eta = 0.5, objective = "binary:logistic")
# 训练模型
model_xgb <- xgboost(data=dtrain, max_depth=5, eta=0.5, nthread = 5, nround=cv$best_iteration, objective='binary:logistic')
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main = 'IT')
table(Adult.Ex.barcode$Ex_subtype)
seu_IT <- subset(Adult.Ex.barcode, cells = colnames(Adult.Ex.barcode)[which(Adult.Ex.barcode$Ex_subtype=='IT')])
table(seu_IT$Proj_module)
Proj <- 'ITi-D'
seu <- seu_IT
# 提取 3000 个高变gene
DefaultAssay(seu) <- 'RNA'
seu_ML <- FindVariableFeatures(seu, nfeatures = 3000)
HVGs <- VariableFeatures(seu)
gene_mat <- t(as.matrix(seu@assays$RNA@data[HVGs,]))
# 投射模块标签
label <- rep(0,ncol(seu))
label[which(seu$Proj_module == Proj)] <- 1
label <- factor(label, levels = c(0,1))
Proj <- 'ITi-D'
seu <- seu_IT
# 提取 3000 个高变gene
DefaultAssay(seu) <- 'RNA'
seu <- FindVariableFeatures(seu, nfeatures = 3000)
HVGs <- VariableFeatures(seu)
gene_mat <- t(as.matrix(seu@assays$RNA@data[HVGs,]))
# 投射模块标签
label <- rep(0,ncol(seu))
label[which(seu$Proj_module == Proj)] <- 1
label <- factor(label, levels = c(0,1))
table(label)
length(which(seu$Proj_module == Proj))
# caret 划分训练集和测试集，保留数据分布
set.seed(20230511)
X <- gene_mat
y <- label
trainIndex <- createDataPartition(y, p = .7, list = FALSE, times = 1)
X_train <- Matrix(X[trainIndex,], sparse = T)
y_train <- as.integer(y[trainIndex]) -1
X_test <- Matrix(X[-trainIndex,], sparse = T)
y_test <- as.integer(y[-trainIndex]) -1
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
# 用 交叉验证 来对模型进行自动验证，找到最适合的迭代次数
cv <- xgb.cv(data = dtrain, nrounds = 1000, nfold = 5, early_stopping_rounds=5, max_depth = 5, eta = 0.5, objective = "binary:logistic")
# 训练模型
model_xgb <- xgboost(data=dtrain, max_depth=5, eta=0.5, nthread = 5, nround=cv$best_iteration, objective='binary:logistic')
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main = 'IT')
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main = Proj)
Proj <- 'ITi-V'
seu <- seu_IT
# 提取 3000 个高变gene
DefaultAssay(seu) <- 'RNA'
seu <- FindVariableFeatures(seu, nfeatures = 3000)
HVGs <- VariableFeatures(seu)
gene_mat <- t(as.matrix(seu@assays$RNA@data[HVGs,]))
# 投射模块标签
label <- rep(0,ncol(seu))
label[which(seu$Proj_module == Proj)] <- 1
label <- factor(label, levels = c(0,1))
# caret 划分训练集和测试集，保留数据分布
set.seed(20230511)
X <- gene_mat
y <- label
trainIndex <- createDataPartition(y, p = .7, list = FALSE, times = 1)
X_train <- Matrix(X[trainIndex,], sparse = T)
y_train <- as.integer(y[trainIndex]) -1
X_test <- Matrix(X[-trainIndex,], sparse = T)
y_test <- as.integer(y[-trainIndex]) -1
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
# 用 交叉验证 来对模型进行自动验证，找到最适合的迭代次数
cv <- xgb.cv(data = dtrain, nrounds = 1000, nfold = 5, early_stopping_rounds=5, max_depth = 5, eta = 0.5, objective = "binary:logistic")
# 训练模型
model_xgb <- xgboost(data=dtrain, max_depth=5, eta=0.5, nthread = 5, nround=cv$best_iteration, objective='binary:logistic')
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main = Proj)
Proj <- 'ITc'
seu <- seu_IT
# 提取 3000 个高变gene
DefaultAssay(seu) <- 'RNA'
seu <- FindVariableFeatures(seu, nfeatures = 3000)
HVGs <- VariableFeatures(seu)
gene_mat <- t(as.matrix(seu@assays$RNA@data[HVGs,]))
# 投射模块标签
label <- rep(0,ncol(seu))
label[which(seu$Proj_module == Proj)] <- 1
label <- factor(label, levels = c(0,1))
# caret 划分训练集和测试集，保留数据分布
set.seed(20230511)
X <- gene_mat
y <- label
trainIndex <- createDataPartition(y, p = .7, list = FALSE, times = 1)
X_train <- Matrix(X[trainIndex,], sparse = T)
y_train <- as.integer(y[trainIndex]) -1
X_test <- Matrix(X[-trainIndex,], sparse = T)
y_test <- as.integer(y[-trainIndex]) -1
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
# 用 交叉验证 来对模型进行自动验证，找到最适合的迭代次数
cv <- xgb.cv(data = dtrain, nrounds = 1000, nfold = 5, early_stopping_rounds=5, max_depth = 5, eta = 0.5, objective = "binary:logistic")
# 训练模型
model_xgb <- xgboost(data=dtrain, max_depth=5, eta=0.5, nthread = 5, nround=cv$best_iteration, objective='binary:logistic')
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main = Proj)
Barcode <- c("ACB-C","ACB-I","AId-C","AId-I","AUD-I","BLA-C","BLA-I","CP-C","CP-I","DR","ECT-C","ECT-I","ENTl-C","ENTl-I","LHA-I","MD-I","PL-C","RE-I","RSP-C","RSP-I","SC-I","SSp-I", "VIS-I","VTA-I")
length(Barcode)
seu@meta.data[,Barcode[1]]
length(which(seu@meta.data[,Barcode[1]]>=0))
length(which(seu@meta.data[,Barcode[2]]>=0))
length(which(seu@meta.data[,Barcode[3]]>=0))
length(which(seu@meta.data[,Barcode[4]]>=0))
length(which(seu@meta.data[,Barcode[5]]>=0))
i=1
Proj <- Barcode[i]
# 投射模块标签
label <- seu@meta.data[,Proj]
label <- label[which(label>=0)]
label[which(label>0)] <- 1
label <- factor(label, levels = c(0,1))
head(label)
?xgb.cv
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
p <- plot(PRROC_obj, xlab = 'False positive rate', main = Proj)
p
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
p <- par(mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main = Proj)
p
?par
plot(PRROC_obj, xlab = 'False positive rate', main = Proj)
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
p <- par(mfrow=c(2,2), mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main = Proj)
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mfrow=c(2,2), mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main = Proj)
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mfrow=c(2,2), mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
plot(PRROC_obj, xlab = 'False positive rate', main = Proj)
plot(PRROC_obj, xlab = 'False positive rate', main = Proj)
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
par(mfrow=c(2,2), mar = c(5, 5, 4, 1),cex.lab=1.5, cex.axis=1.5,cex.main=1.5)
p <- plot(PRROC_obj, xlab = 'False positive rate', main = Proj)
p
PRROC_obj
PRROC_obj$auc
PRROC_obj$curve
PRROC_obj$type
?roc.curve
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,fill=fill))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill))
rainbow(5)
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
scale_color_manual(values = rainbow(nrow(df)))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
scale_color_continuous(values = rainbow(nrow(df)))
?scale_color_continuous
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
scale_color_gradientn(colours = rainbow(5))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
scale_color_gradientn(colours = rainbow(8))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
scale_color_gradientn(colours = rainbow(7))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
scale_color_gradientn(colours = rainbow(6))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
scale_color_gradientn(colours = rainbow(5))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
scale_color_gradientn(colours = rainbow(5)) +
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
scale_color_gradientn(colours = rainbow(5))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_void() +
scale_color_gradientn(colours = rainbow(5))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_classic() +
scale_color_gradientn(colours = rainbow(5))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
scale_color_gradientn(colours = rainbow(5))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
theme(panel.grid=element_blank()) +
scale_color_gradientn(colours = rainbow(5))
paste(Proj,'\nAUC',sep='')
paste(Proj,'"\n"AUC',sep='')
paste(Proj,'/nAUC',sep='')
paste(Proj,/n,'AUC',sep='')
paste(Proj,'/n','AUC',sep='')
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
theme(panel.grid=element_blank()) +
scale_color_gradientn(colours = rainbow(5)) +
labs(x='False positive rate', y='Sensitivity', title = paste(Proj,'/n','AUC',sep=''))
paste(Proj,'\n','AUC',sep='')
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
theme(panel.grid=element_blank()) +
scale_color_gradientn(colours = rainbow(5)) +
labs(x='False positive rate', y='Sensitivity', title = paste(Proj,'\n','AUC',sep=''))
PRROC_obj$auc
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
theme(panel.grid=element_blank()) +
scale_color_gradientn(colours = rainbow(5)) +
labs(x='False positive rate', y='Sensitivity', title = paste(Proj,'\n','AUC=',PRROC_obj$auc,sep=''))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
theme(panel.grid=element_blank()) +
scale_color_gradientn(colours = rainbow(5)) +
labs(x='False positive rate', y='Sensitivity', title = paste(Proj,'\n','AUC = ',PRROC_obj$auc,sep=''))
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
theme(panel.grid=element_blank(), plot.title = element_text(hjust = 0.5)) +
scale_color_gradientn(colours = rainbow(5)) +
labs(x='False positive rate', y='Sensitivity', title = paste(Proj,'\n','AUC = ',PRROC_obj$auc,sep=''))
PRROC_obj$auc
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
theme(panel.grid=element_blank(), plot.title = element_text(hjust = 0.5)) +
scale_color_gradientn(colours = rainbow(5)) +
labs(x='False positive rate', y='Sensitivity', title = paste(Proj,'\n','AUC = ', round(PRROC_obj$auc,7), sep=''))
?element_text
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
theme(panel.grid=element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold")) +
scale_color_gradientn(colours = rainbow(5)) +
labs(x='False positive rate', y='Sensitivity', title = paste(Proj,'\n','AUC = ', round(PRROC_obj$auc,7), sep=''))
seu <- Adult.Ex.barcode
# 提取 3000 个高变gene
DefaultAssay(seu) <- 'RNA'
seu <- FindVariableFeatures(seu, nfeatures = 3000)
HVGs <- VariableFeatures(seu)
gene_mat <- t(as.matrix(seu@assays$RNA@data[HVGs,]))
plist <- list()
for (i in 1:length(Barcode)){
Proj <- Barcode[i]
# 投射模块标签
label <- seu@meta.data[,Proj]
label <- label[which(label>=0)]
label[which(label>0)] <- 1
label <- factor(label, levels = c(0,1))
# caret 划分训练集和测试集，保留数据分布
set.seed(20230511)
X <- gene_mat[which(seu@meta.data[,Proj]>=0),]
y <- label
trainIndex <- createDataPartition(y, p = .7, list = FALSE, times = 1)
X_train <- Matrix(X[trainIndex,], sparse = T)
y_train <- as.integer(y[trainIndex]) -1
X_test <- Matrix(X[-trainIndex,], sparse = T)
y_test <- as.integer(y[-trainIndex]) -1
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
# 用 交叉验证 来对模型进行自动验证，找到最适合的迭代次数
cv <- xgb.cv(data = dtrain, nrounds = 1000, nfold = 5, early_stopping_rounds=5,
max_depth = 5, eta = 0.5, objective = "binary:logistic", verbose=F)
# 训练模型
model_xgb <- xgboost(data=dtrain, max_depth=5, eta=0.5, nthread = 5,
nround=cv$best_iteration, objective='binary:logistic')
# 预测
pre <- predict(model_xgb, newdata=dtest)
PRROC_obj <- roc.curve(scores.class0=pre, weights.class0=y_test, curve=TRUE)
df <- data.frame('x'=PRROC_obj$curve[,1],
'y'=PRROC_obj$curve[,2],
'fill'=PRROC_obj$curve[,3])
plist[[i]] <-  ggplot(df) +
geom_line(aes(x=x,y=y,color=fill)) +
theme_bw() +
theme(panel.grid=element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold")) +
scale_color_gradientn(colours = rainbow(5)) +
labs(x='False positive rate', y='Sensitivity',
title = paste(Proj,'\n','AUC = ', round(PRROC_obj$auc,7), sep=''))
}
length(plist)
library(cowplot)
plot_grid(plotlist = plist, ncol=6)
plot_grid(plotlist = plist, ncol=6)
setwd("F:/Github/Bioinformatics-Tools/机器学习深度学习/001.XGBoost")
Barcode <- c("ACB-C","ACB-I","AId-C","AId-I","AUD-I","BLA-C","BLA-I","CP-C","CP-I","DR","ECT-C","ECT-I","ENTl-C","ENTl-I","LHA-I","MD-I","PL-C","RE-I","RSP-C","RSP-I","SC-I","SSp-I", "VIS-I","VTA-I")
library(Seurat)
library(caret)
library(xgboost)
library(Matrix)
library(pROC)
library(PRROC)
library(cowplot)
plot_grid(plotlist = plist, ncol=6)
