---
title: "I. Network analysis of liver expression data from female mice: finding modules related to body weight"
author: "TigerZ"
date: 2023-08-07
date-format: YYYY-MM-DD
format: 
  html:
    embed-resources: true
    toc: true
    code-fold: show
    code-tools: true
    df-print: kable
---

**雌性小鼠肝脏表达数据的网络分析：寻找与体重相关的模块**

导入相关package：

```{r}
#| warning: false

library(WGCNA)
```

## 1 Data input, cleaning and pre-processing

**1 数据输入、清洗和预处理**

这是任何网络分析的第一步。我们在这里展示如何加载典型的表达数据，将它们预处理成适合网络分析的格式，并通过删除明显的离群样本以及基因和缺失条目数量过多的样本来清理数据。

### 1.a Loading expression data

**1.a 加载表达数据**

表达数据包含在本教程附带的 LiverFemale3600.csv 文件中。

下载tutorial数据：[zipped data sets](https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/FemaleLiver-Data.zip)

```{r}
# 导入 female liver 数据集
femData = read.csv("FemaleLiver-Data/LiverFemale3600.csv")
```

```{r}
# 查看数据维度
dim(femData)
```

表达数据集包含 135 个样本。请注意，每行对应一个 gene，每列对应 sample 和其他辅助信息。

```{r}
# 查看数据内容
head(femData)
```

我们现在删除辅助数据并转置表达数据以进行进一步分析：datExpr0 行为 135 个样本，列为 3600 个 gene。

```{r}
datExpr0 = as.data.frame(t(femData[, -c(1:8)]))
colnames(datExpr0) = femData$substanceBXH
rownames(datExpr0) = colnames(femData)[-c(1:8)]
dim(datExpr0)
```

### 1.b Checking data for excessive missing values and identification of outlier microarray samples

**1.b 检查数据是否有过度的缺失值和识别离群微阵列样本**

我们首先检查缺失值过多的基因和样本：

```{r}
gsg = goodSamplesGenes(datExpr0, verbose = 3)
```

```{r}
gsg$allOK
```

如果 gsg\$allOK 的结果为 TRUE，证明没有缺失值，可以直接下一步。如果为 FALSE，则需要用以下函数进行删除缺失值：

```{r}
if (!gsg$allOK){
  # 可选，打印已删除的 gene 和 sample 名称：
  if (sum(!gsg$goodGenes)>0)
  printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
  if (sum(!gsg$goodSamples)>0)
  printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
  # 从数据中删除有问题的 gene 和 sample：
  datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}
```

接下来我们对样本进行聚类,以查看是否有任何明显的异常值

```{r fig.width=12, fig.height=9}
sampleTree = hclust(dist(datExpr0), method = "average");
# 绘制示例树：打开尺寸为 12 x 9 英寸的图形输出窗口
# 如果窗口太大或太小，用户应该更改尺寸。
#sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", 
     cex.lab = 1.5,cex.axis = 1.5, cex.main = 2)
# Plot a line to show the cut
abline(h = 15, col = "red");
```

似乎存在一个异常值（sample F2_221, see Fig.1）。你可以手动将其移除，也可以使用自动方法。选择一个高度来 cut 离群样本，例如 15（图中的红线），并在该高度使用 branch cut。

```{r}
# 确定线下 cluster
clust = cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
# clust 1 包含我们想要保留的样本
keepSamples = (clust==1)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
```

变量 datExpr 现在包含可供网络分析使用的表达数据。

### 1.c Loading clinical trait data

**1.c 加载临床特征数据**

我们现在读入特征（trait）数据，并将它们与表达量样本匹配

```{r}
traitData = read.csv("FemaleLiver-Data/ClinicalTraits.csv");
# 删除包含我们不需要的信息的列。
allTraits = traitData[, -c(31, 16)];
allTraits = allTraits[, c(2, 11:36) ];
# 形成类似于表达数据的数据框，以保存临床特征。
femaleSamples = rownames(datExpr);
traitRows = match(femaleSamples, allTraits$Mice)
datTraits = allTraits[traitRows, -1]
rownames(datTraits) = allTraits[traitRows, 1]
collectGarbage()
```

我们现在在变量 datExpr 中有表达量数据，在变量 datTraits 中有相应的特征数据。 在我们继续网络构建和模块检测之前，我们将特征与样本树状图的关系可视化。

```{r fig.width=18, fig.height=9}
# Re-cluster samples
sampleTree2 = hclust(dist(datExpr), method = "average")
# 将特征转换为颜色表示：白色表示低，红色表示高，灰色表示缺失条目
traitColors = numbers2colors(datTraits, signed = FALSE);
# 绘制样本树状图和下面的颜色
plotDendroAndColors(sampleTree2, traitColors, groupLabels = names(datTraits),
                    main = "Sample dendrogram and trait heatmap")
```

在 Fig.2 所示的图中，白色表示低值，红色表示高值，灰色表示缺失条目。

最后一步是保存相关的表达式和特征数据，以便在教程的后续步骤中使用。

```{r}
save(datExpr, datTraits, file = "FemaleLiver-01-dataInput.RData")
```



## 2 Network construction and module detection
**2 网络构建及模块检测**

此步骤是使用 WGCNA 方法进行所有网络分析的基础。作者提出了构建网络和识别模块的三种不同方法：
a. 采用便捷的一步网络构建和模块检测功能，适合希望事半功倍的用户；
b. 逐步的网络构建和模块检测，适合想要尝试定制/替代方法的用户；
c. 一个自动分块网络构建和模块检测方法，适合希望分析太大而无法一次性分析的数据集的用户。

准备工作：

```{r}
# 开启多线程
enableWGCNAThreads()
# 载入第一步保存的数据
lnames = load(file = "FemaleLiver-01-dataInput.RData");
lnames
```

我们已经加载了分别包含表达量和特征数据的变量 datExpr 和 datTraits。

### 2.a Automatic network construction and module detection
**2.a 自动网络构建和模块检测**

#### 2.a.1 Choosing the soft-thresholding power: analysis of network topology
**2.a.1 选择软阈值幂：网络拓扑分析**

构建加权基因网络需要选择软阈值幂 β，通过提高共表达相似度来计算邻接度(djacency)。 作者提出基于近似无标度拓扑的标准来选择软阈值能力。在这里，我们演示了 `pickSoftThreshold` 函数的使用，该函数执行网络拓扑分析并帮助用户选择合适的软阈值幂。用户选择一组候选幂（该函数提供合适的默认值），该函数返回一组应检查的网络索引，例如如下：

```{r}
#| message: false

# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
```

```{r fig.width=9, fig.height=5}
# Plot the results:
#sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
```

左图，无标度拓扑拟合指数，是用来选择软阈值的一个根据。我们一般选择在0.9以上的， 第一个达到0.9以上数值。左图的6是第一个达到0.9的数值，可以考虑6作为软阈值。 如果在0.9以上就没有数值了，我们就要降低标准，但是最低不能小于0.8。
右图，平均连接度，数值为6的时候，已经开始持平，则软阈值为6时，网络的连通性好。
运行下面的代码，如果有合适的软阈值，系统会自动推荐给你:

```{r}
sft$powerEstimate
```

如果显示的结果为 NA，则表明系统无法给出合适的软阈值，这时候就需要自己挑选软阈值。 手动挑选软阈值的大致规则如上面所述。


#### 2.a.2 One-step network construction and module detection
**2.a.2 一步网络构建及模块检测**

构建基因网络和识别模块现在是一个简单的函数调用：

```{r}
net = blockwiseModules(datExpr, power = 6,
                       TOMType = "unsigned", minModuleSize = 30,
                       reassignThreshold = 0, mergeCutHeight = 0.25,
                       numericLabels = TRUE, pamRespectsDendro = FALSE,
                       saveTOMs = TRUE,
                       saveTOMFileBase = "femaleMouseTOM",
                       verbose = 3)
# 参数解释
# power = 6 是刚才选择的软阈值
# minModuleSize：模块中最少的基因数
# mergeCutHeight：模块合并阈值，阈值越大，模块越少
# saveTOMs = TRUE, saveTOMFileBase = "femaleMouseTOM" 保存 TOM 矩阵，名字为"femaleMouseTOM"
# net$colors 包含模块分配，net$MEs 包含模块的模块特征基因。
```

```{r}
table(net$colors)
```

以上结果表示一共可以分为 18 个模块，模块 0 是无法识别的基因，从模块 1 开始，基因数逐渐减少。

模块标识的层次聚类树状图，可以使用以下代码将树状图与颜色分配一起显示：

```{r fig.width=12, fig.height=9}
# open a graphics window
#sizeGrWindow(12, 9)
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
                    "Module colors",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)
```

请注意，如果你想要更改某些树切割、模块成员资格和模块合并标准，该包提供了函数 recutBlockwiseTrees，该函数可以应用修改后的标准，而无需重新计算网络和聚类树状图。这可能会节省大量时间。

我们现在保存后续分析所需的模块分配和模块特征基因信息：

```{r}
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs
geneTree = net$dendrograms[[1]]
save(MEs, moduleLabels, moduleColors, geneTree,
     file = "FemaleLiver-02-networkConstruction-auto.RData")
```


### 2.b Step-by-step network construction and module detection
**2.b 逐步的网络构建和模块检测**

准备工作：

```{r}
# 开启多线程
enableWGCNAThreads()
# 载入第一步保存的数据
lnames = load(file = "FemaleLiver-01-dataInput.RData");
lnames
```

#### 2.b.1 Choosing the soft-thresholding power: analysis of network topology
**2.b.1 选择软阈值幂：网络拓扑分析**

```{r}
#| message: false

# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
```

```{r fig.width=9, fig.height=5}
# Plot the results:
#sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
```

#### 2.b.2 Co-expression similarity and adjacency
**2.b.2 共表达相似性和邻接性**

我们现在使用软阈值幂 6 计算邻接：

```{r}
softPower = 6
adjacency = adjacency(datExpr, power = softPower)
```

#### 2.b.3 Topological Overlap Matrix (TOM)
**2.b.3 拓扑重叠矩阵（TOM）**

为了最大限度地减少噪声和虚假关联的影响，我们将邻接值（ adjacenc）转换为拓扑重叠矩阵（Topological Overlap Matrix, TOM），并计算相应的相异度（ dissimilarity）：

```{r}
# Turn adjacency into topological overlap
TOM = TOMsimilarity(adjacency);
dissTOM = 1-TOM
```

#### 2.b.4 Clustering using TOM
**2.b.4 使用 TOM 进行聚类**

我们现在使用层次聚类来生成基因的层次聚类树（树状图）。请注意，我们使用的函数 hclust 提供了比标准 hclust 函数更快的层次聚类例程。

```{r fig.width=12, fig.height=9}
# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
# Plot the resulting clustering tree (dendrogram)
#sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04);
```

最后一个命令绘制的聚类树状图如图所示。在聚类树（树状图）中，每个叶子（即一条短垂直线）对应于一个基因。树状图组的分支紧密相连、高度共表达的基因。模块识别相当于识别各个分支（“从树形图上切掉分支”）。剪枝的方法有多种；我们的标准方法是来自包 `dynamicTreeCut` 的动态树切割。下一个代码片段说明了它的用法。

```{r}
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM, 
                            deepSplit = 2, pamRespectsDendro=FALSE,
                            minClusterSize=minModuleSize)
table(dynamicMods)
```

该函数返回 22 个模块，标记为 1-22 从大到小。标签0被保留给未分配的基因。上面的命令列出了模块的大小。我们现在在基因树图下绘制模块分配：

```{r}
# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
```

```{r fig.width=8, fig.height=6}
# Plot the dendrogram and colors underneath
#sizeGrWindow(8,6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05,
                    main = "Gene dendrogram and module colors")
```

#### 2.b.5 Merging of modules whose expression profiles are very similar
**2.b.5 合并表达谱非常相似的模块**

动态树剪切可以识别其表达谱非常相似的模块。合并这些模块可能是谨慎的， 因为它们的基因是高度共表达的。为了量化整个模块的共表达相似性，我们计算了它们的 特征基因（eigengenes），并对它们的相关性进行了聚类：

```{r fig.width=7, fig.height=6}
# Calculate eigengenes
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
#sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes", xlab = "", sub = "")
MEDissThres = 0.25
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
```

我们选择一个 0.25 的高度切割，对应的相关性为 0.75，进行合并。

```{r}
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs
```

为了了解合并对我们的模块颜色做了什么，我们再次绘制了基因树状图，下面是原始的和合 并的模块颜色

```{r fig.width=12, fig.height=9}
#sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
                    c("Dynamic Tree Cut", "Merged dynamic"),
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)
#dev.off()
```

在随后的分析中，我们将在合并的颜色中使用合并的模块颜色。我们将相关变量保存在本教 程的后续部分中使用：

```{r}
# Rename to moduleColors
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
# Save module colors and labels for use in subsequent parts
save(MEs, moduleLabels, moduleColors, geneTree, 
     file = "FemaleLiver-02-networkConstruction-stepByStep.RData")
```


### 2.c Dealing with large datasets: block-wise network construction and module detection
**2.c 处理大型数据集：分块网络构建和模块检测**

准备工作：

```{r}
# 开启多线程
enableWGCNAThreads()
# 载入第一步保存的数据
lnames = load(file = "FemaleLiver-01-dataInput.RData");
lnames
```

#### 2.c.1 Choosing the soft-thresholding power: analysis of network topology
**2.c.1 选择软阈值幂：网络拓扑分析**

```{r}
#| message: false

# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
```

```{r fig.width=9, fig.height=5}
# Plot the results:
#sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
```

#### 2.c.2 Block-wise network construction and module detection
**2.c.2 分块网络构建和模块检测**

在本教程中，我们使用包含 3600 个测量探针的相对较小的数据集。然而，现代微阵列可以一次测量多达 50,000 个探针表达水平。即使在大型服务器上，构建和分析具有如此大量节点的网络在计算上也具有挑战性。作者介绍了一种在 WGCNA 包中实现的方法，该方法允许用户对大量的基因执行网络分析。为了简单起见，我们将假设硬件限制一次可以分析的基因数量为 2000 个，而不是实际使用的非常大的数据集。基本思想是使用两级聚类。首先，我们使用快速、计算成本低且相对粗略的聚类方法将基因预先聚类成大小接近且不超过最大 2000 个基因的块。然后，我们分别在每个块中执行完整的网络分析。最后，特征基因高度相关的模块被合并。分块方法的优点是内存占用小得多（这是标准台式计算机上大型数据集的主要问题），并且计算速度显着加快。缺点是，由于使用更简单的聚类来获得块，这些块可能不是最佳的，导致一些外围基因被分配到与完整网络分析中不同的模块。
现在，我们假设在这里使用的 3600 个基因数量太大了，并且我们运行分析的计算机无法处理一个块中超过 2000 个基因。自动网络构建和模块检测功能 blockwiseModules 可以自动处理分块；用户只需要指定一个块中可以容纳的最大基因数：

```{r}
bwnet = blockwiseModules(datExpr, maxBlockSize = 2000,
                         power = 6, TOMType = "unsigned", minModuleSize = 30,
                         reassignThreshold = 0, mergeCutHeight = 0.25,
                         numericLabels = TRUE,
                         saveTOMs = TRUE,
                         saveTOMFileBase = "femaleMouseTOM-blockwise",
                         verbose = 3)
```

下面我们将将此分析的结果与 2.a 中的结果进行比较，其中所有基因都在 single-block 中进行分析。为了使比较更容易，我们重新标记 block-wise 模块标签，以便与 single-block 模块有显着重叠的模块具有相同的标签：

```{r}
# Load the results of single-block analysis
load(file = "FemaleLiver-02-networkConstruction-auto.RData");
# Relabel blockwise modules
bwLabels = matchLabels(bwnet$colors, moduleLabels);
# Convert labels to colors for plotting
bwModuleColors = labels2colors(bwLabels)
```

```{r fig.width=6, fig.height=6}
# open a graphics window
#sizeGrWindow(6,6)
# Plot the dendrogram and the module colors underneath for block 1
plotDendroAndColors(bwnet$dendrograms[[1]], bwModuleColors[bwnet$blockGenes[[1]]],
"Module colors", main = "Gene dendrogram and module colors in block 1",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Plot the dendrogram and the module colors underneath for block 2
plotDendroAndColors(bwnet$dendrograms[[2]], bwModuleColors[bwnet$blockGenes[[2]]],
"Module colors", main = "Gene dendrogram and module colors in block 2",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
```

#### 2.c.3 Comparing the single block and block-wise network analysis
**2.c.3 比较单块和块式网络分析**

我们现在将 2 个 blocks 的 block-wise 分析的结果与 2.a（其中所有基因都在单个 block 中进行分析）中的结果进行比较。可以通过在树状图下方绘制 single-block 树状图以及 single-block 和 block-wise 模块颜色来获得简单的视觉检查：

结果图如图 3 所示。目视检查证实 single-block 和 block-wise 模块分配之间存在极好的一致性。

我们现在验证在 single-block 和 block-wise 方法中彼此对应的模块的模块特征基因非常相似。我们首先根据 single-block 和 block-wise 模块颜色计算模块特征基因：

接下来我们按名称匹配 single-block 和 block-wise 特征基因并计算相应特征基因的相关性：

上面的每个数字代表 single-block 特征基因与其相应的 block-wise 对应部分的相关性。相关性都非常接近 1，再次表明 block-wise 分析和 single-block 分析得出非常相似的结果。


## 3 Relating modules to external clinical traits and identifying important genes
**将模块与外部信息联系起来并识别重要基因**

参数设置与载入之前的分析结果:

```{r}
load(file = "FemaleLiver-01-dataInput.RData");
load(file = "FemaleLiver-02-networkConstruction-auto.RData")
```


### 3.a Quantifying module–trait associations
**3.a 量化模块-性状关联**

在这项分析中，我们希望确定与测量的临床性状（traits）显著相关的模块。由于我们已经为每个模块有了一个概要文件（eigengene），我们只是简单地将特征基因（eigengene）与外部性状（traits）联系起来，并寻找最重要的关联：

```{r}
# Define numbers of genes and samples
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
```

由于我们有相当数量的模块和性状，一个合适的图形表示将有助于读取表。我们用相关值为 每个关联进行颜色编码：

```{r fig.width=10, fig.height=6}
#sizeGrWindow(10,6)
# 展示模块与表型数据的相关系数和 P值
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
                   signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# 用热图的形式展示相关系数
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(datTraits),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = greenWhiteRed(50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.5,
               zlim = c(-1,1),
               main = paste("Module-trait relationships"))
```

该分析确定了几个重要的 module–trait 关联。我们将关注体重（weight）作为感兴趣的特征。


### 3.b Gene relationship to trait and important modules: Gene Significance and Module Membership
**3.b 基因与性状和重要模块的关系：Gene Significance 和 Module Membership**

我们通过定义 Gene Significance(GS) 为 gene 和 trait 的相关性，来量化单个基因与我们感兴趣的性状（体重weight）的关联。对于每个模块，我们定义 module membership(MM) 为 module eigengene 和 gene expression profile 的相关性。这使得我们能够量化阵列上的所有基因与每个模块的相似性。

```{r}
# Define variable weight containing the weight column of datTrait
weight = as.data.frame(datTraits$weight_g)
names(weight) = "weight"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="")
names(MMPvalue) = paste("p.MM", modNames, sep="")
geneTraitSignificance = as.data.frame(cor(datExpr, weight, use = "p"))
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
names(geneTraitSignificance) = paste("GS.", names(weight), sep="")
names(GSPvalue) = paste("p.GS.", names(weight), sep="")
```


### 3.c Intramodular analysis: identifying genes with high GS and MM
**3.c 模块内分析：识别具有高 GS 和 MM 的基因**

使用 GS 和 MM 测量方法，我们可以识别出对于体重（weight） 有高显著性，并在感兴趣的模块中具有高模块成员身份的基因。作为一个例子，我们来看看与体重（weight）关联最高的 brown 模块：

```{r fig.width=7, fig.height=7}
module = "brown"
column = match(module, modNames);
moduleGenes = moduleColors==module;
#sizeGrWindow(7, 7);
par(mfrow = c(1,1));
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
                   abs(geneTraitSignificance[moduleGenes, 1]),
                   xlab = paste("Module Membership in", module, "module"),
                   ylab = "Gene significance for body weight",
                   main = paste("Module membership vs. gene significance\n"),
                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
```

如上图所示。显然，GS 和 MM 是高度相关的，这说明与一个性状高度显著相关的基因通常也是 与该性状相关的模块中最重要的（中心）元素。我们鼓励读者尝试这个具有其他显著性特征/模块相关性的代码（例如，洋红色、午夜蓝色和红色模块的重量）。


### 3.d Summary output of network analysis results
**3.d 网络分析结果汇总输出**

我们已经发现了与我们感兴趣的特征有高度相关的模块，并通过模块成员度度量确定了它们 的核心参与者。我们现在将这些统计信息与基因注释合并，并写出一个总结最重要结果的文件，可以在标准电子表格软件如 MS Excel 或 Open Office Calc 中进行检查。 我们的表达量数据只用探针 ID 名称进行注释。为了便于解释结果，我们使用表达阵列制造商提供的探针注释文件（GeneAnnotation.csv）将探针 ID 与基因名称和普遍认可的识别号（Entrez 代码）连接起来。

```{r}
annot = read.csv(file = "FemaleLiver-Data/GeneAnnotation.csv")
probes = names(datExpr)
probes2annot = match(probes, annot$substanceBXH);
# The following is the number or probes without annotation:
sum(is.na(probes2annot))
# Should return 0.
# Create the starting data frame
geneInfo0 = data.frame(substanceBXH = probes,
                       geneSymbol = annot$gene_symbol[probes2annot],
                       LocusLinkID = annot$LocusLinkID[probes2annot],
                       moduleColor = moduleColors,
                       geneTraitSignificance,
                       GSPvalue)
# Order modules by their significance for weight
modOrder = order(-abs(cor(MEs, weight, use = "p")));
# Add module membership information in the chosen order
for (mod in 1:ncol(geneModuleMembership)){
  oldNames = names(geneInfo0)
  geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]],
                         MMPvalue[, modOrder[mod]]);
  names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
                       paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance
geneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0$GS.weight));  # 排序
geneInfo = geneInfo0[geneOrder, ]
# 输出为CSV格式，可用fix(geneInfo)在R中查看：
write.csv(geneInfo, file = "geneInfo.csv")
```


## 4 Interfacing network analysis with other data such as functional annotation and gene ontology
**将网络分析与其他数据（例如功能注释和 gene ontology）连接起来**

载入之前的分析结果:

```{r}
load(file = "FemaleLiver-01-dataInput.RData")
load(file = "FemaleLiver-02-networkConstruction-auto.RData")
```

我们之前的分析已经确定了几个与体重（weight）高度相关的模块（标记为 brown、red、salmon）。为了便于生物学解释，我们想知道模块中基因的 gene ontologies，它们是否在某些功能类别中显着富集等。


### 4.a Output gene lists for use with online software and services
**4.a 输出基因列表以供在线软件和服务使用**

一种选择是简单地导出 gene identifiers 列表，该列表可用作几种流行的 gene ontology 和功能富集分析套件（例如 David 或 AmiGO）的输入。例如，我们将 brown 模块的 LocusLinkID(entrez) 代码写入文件中：

```{r}
# Read in the probe annotation
annot = read.csv(file = "geneInfo.csv");
# Match probes in the data set to the probe IDs in the annotation file
probes = names(datExpr)
probes2annot = match(probes, annot$substanceBXH)
# Get the corresponding Locuis Link IDs
allLLIDs = annot$LocusLinkID[probes2annot];
# $ Choose interesting modules
intModules = c("brown", "red", "salmon")
for (module in intModules){
  # Select module probes
  modGenes = (moduleColors==module)
  # Get their entrez ID codes
  modLLIDs = allLLIDs[modGenes];
  # Write them into a file
  fileName = paste("LocusLinkIDs-", module, ".txt", sep="");
  write.table(as.data.frame(modLLIDs), file = fileName,
              row.names = FALSE, col.names = FALSE)
}
# As background in the enrichment analysis, we will use all probes in the analysis.
fileName = paste("LocusLinkIDs-all.txt", sep="");
write.table(as.data.frame(allLLIDs), file = fileName,
            row.names = FALSE, col.names = FALSE)
```


### 4.b Enrichment analysis directly within R
**4.b 直接在 R 中进行富集分析**

WGCNA 包现在包含一个功能，可以使用简单的一步执行 GO 富集分析。要运行该函数，需要在运行此代码之前安装 Biconductor 包 GO.db、AnnotationDBI 和适当的物种特定注释包。特定于物种的包的名称格式为 org.Xx.eg.db，其中 Xx 代表生物体代码，例如，Mm 代表小鼠，Hs 代表人类等。唯一的例外是酵母，它没有 org.Xx.eg.db 包可用；相反，该包的名称为 org.Sc.sgd.db。请访问 Bioconductor 主页 http://www.bioconductor.org 下载并安装所需的软件包。在我们的例子中，我们正在研究小鼠的基因表达，因此此代码需要包 org.Mm.eg.db。调用 GO 富集分析函数 GOenrichmentAnalysis 非常简单。该函数采用模块标签向量，以及给定标签的基因的 Entrez（又名 Locus Link）编码。

```{r}
GOenr = GOenrichmentAnalysis(moduleColors, allLLIDs, organism = "mouse", nBestP = 10)
tab = GOenr$bestPTerms[[4]]$enrichment
names(tab)
write.table(tab, file = "GOEnrichmentTable.csv", sep = ",", quote = TRUE, row.names = FALSE)
keepCols = c(1, 2, 5, 6, 7, 12, 13);
screenTab = tab[, keepCols];
# Round the numeric columns to 2 decimal places:
numCols = c(3, 4);
screenTab[, numCols] = signif(apply(screenTab[, numCols], 2, as.numeric), 2)
# Truncate the the term name to at most 40 characters
screenTab[, 7] = substring(screenTab[, 7], 1, 40)
# Shorten the column names:
colnames(screenTab) = c("module", "size", "p-val", "Bonf", "nInTerm", "ont", "term name");
rownames(screenTab) = NULL;
# Set the width of R’s output. The reader should play with this number to obtain satisfactory output.
options(width=95)
# Finally, display the enrichment table:
screenTab
```



## 5 Network visualization using WGCNA functions
**5 使用 WGCNA 函数的网络可视化**

载入之前的分析结果:

```{r}
load(file = "FemaleLiver-01-dataInput.RData")
load(file = "FemaleLiver-02-networkConstruction-auto.RData")
```


### 5.a Visualizing the gene network
**5.a 基因网络可视化**

可视化加权网络的一种方法是绘制其热图，如下图所示。热图的每一行和每一列对应于一个基因。热图可以描绘邻接（adjacencies）或拓扑（topological）重叠，浅色表示邻接度（重叠）较低，深色表示邻接度（重叠）较高。此外，基因树状图和模块颜色沿着热图的顶部和左侧绘制。该软件包提供了创建此类网络图的便捷功能，使用如下所示的代码创建。仅当使用 single-block 方法（即使用 1-step automati 或 step-by-step tutorial）计算网络时，才能执行此代码。如果使用 block-wise 方法计算网络，则用户将需要修改此代码以分别在每个 block 中执行可视化。

```{r}
# Calculate topological overlap anew: this could be done more efficiently by saving the TOM
# calculated during module detection, but let us do it again here.
dissTOM = 1-TOMsimilarityFromExpr(datExpr, power = 6);
# Transform dissTOM with a power to make moderately strong connections more visible in the heatmap
plotTOM = dissTOM^7;
# Set diagonal to NA for a nicer plot
diag(plotTOM) = NA;
# Call the plot function
sizeGrWindow(9,9)
TOMplot(plotTOM, geneTree, moduleColors, main = "Network heatmap plot, all genes")
```

请注意，生成热图可能需要大量时间。可以限制基因数量以加快绘图速度；然而，基因子集的基因树状图通常看起来与所有基因的基因树状图不同。在下面的示例中，我们将绘制的基因数量限制为 400：

```{r}
nSelect = 400
# For reproducibility, we set the random seed
set.seed(10);
select = sample(nGenes, size = nSelect);
selectTOM = dissTOM[select, select];
# There’s no simple way of restricting a clustering tree to a subset of genes, so we must re-cluster.
selectTree = hclust(as.dist(selectTOM), method = "average")
selectColors = moduleColors[select];
# Open a graphical window
sizeGrWindow(9,9)
# Taking the dissimilarity to a power, say 10, makes the plot more informative by effectively changing
# the color palette; setting the diagonal to NA also improves the clarity of the plot
plotDiss = selectTOM^7;
diag(plotDiss) = NA;
TOMplot(plotDiss, selectTree, selectColors, main = "Network heatmap plot, selected genes")
```


### 5.b Visualizing the network of eigengenes
**5.b 可视化 eigengenes 网络**

研究找到的模块之间的关系通常很有趣。人们可以使用特征基因（eigengenes）作为代表性概况，并通过特征基因相关性来量化模块相似性。该包包含一个方便的函数 `plotEigengeneNetworks` 生成特征基因网络的摘要图。将临床性状（或多个性状）添加到特征基因中，以了解这些特征如何适应特征基因网络，通常会提供丰富的信息：

```{r fig.width=5, fig.height=7.5}
# Recalculate module eigengenes
MEs = moduleEigengenes(datExpr, moduleColors)$eigengenes
# Isolate weight from the clinical traits
weight = as.data.frame(datTraits$weight_g);
names(weight) = "weight"
# Add the weight to existing module eigengenes4
MET = orderMEs(cbind(MEs, weight))
# Plot the relationships among the eigengenes and the trait
#sizeGrWindow(5,7.5);
par(cex = 0.9)
plotEigengeneNetworks(MET, "", marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2),
                      cex.lab = 0.8, xLabelsAngle = 90)
```

该函数生成特征基因和性状的树状图，以及它们关系的热图。要分割树状图和热图，我们可以使用以下代码

```{r}
# Plot the dendrogram
sizeGrWindow(6,6);
par(cex = 1.0)
plotEigengeneNetworks(MET, "Eigengene dendrogram", marDendro = c(0,4,2,0),
plotHeatmaps = FALSE)
# Plot the heatmap matrix (note: this plot will overwrite the dendrogram plot)
par(cex = 1.0)
plotEigengeneNetworks(MET, "Eigengene adjacency heatmap", marHeatmap = c(3,4,2,2),
plotDendrograms = FALSE, xLabelsAngle = 90)
```

图 2 显示了上述代码的输出。特征基因树状图和热图识别了称为 meta-modules 的相关特征基因分组。例如，树状图表明红色、棕色和蓝色模块高度相关；它们的相互相关性强于它们与体重（weight）的相关性。另一方面，salmon 模块也与体重（weight）显着相关，它不是与红色、棕色和蓝色模块相同的 meta-modules 的一部分。




## 6 Export of networks to external software
**6 将网络导出到外部软件**

载入之前的分析结果:

```{r}
load(file = "FemaleLiver-01-dataInput.RData")
load(file = "FemaleLiver-02-networkConstruction-auto.RData")
```

### 6.a Exporting to VisANT
**6.a 导出到 VisANT**

该软件包提供了将网络导出到 VisANT 的便捷功能。我们演示了单个模块的全加权网络的简单导出。

```{r}
# Recalculate topological overlap
TOM = TOMsimilarityFromExpr(datExpr, power = 6);
# Read in the annotation file
annot = read.csv(file = "GeneAnnotation.csv");
# Select module
module = "brown";
# Select module probes
probes = names(datExpr)
inModule = (moduleColors==module);
modProbes = probes[inModule];
# Select the corresponding Topological Overlap
modTOM = TOM[inModule, inModule];
dimnames(modTOM) = list(modProbes, modProbes)
# Export the network into an edge list file VisANT can read
vis = exportNetworkToVisANT(
  modTOM,
  file = paste("VisANTInput-", module, ".txt", sep=""),
  weighted = TRUE,
  threshold = 0,
  probeToGene = data.frame(annot$substanceBXH,annot$gene_symbol) )
```


由于 Brown 模块相当大，我们可以将输出中的基因限制为模块中的前 30 个 hub genes：

为了提供 VisANT 可视化的示例，我们在 VisANT 中加载了上述代码生成的文件。为了更好的可读性，我们改变了显示两个节点之间的链接的阈值。结果如 Figure 1 所示。

### 6.b Exporting to Cytoscape
**6.b 导出到 Cytoscape**

Cytoscape 允许用户输入 edge 文件和 node 文件，允许用户指定例如链接权重和节点颜色。在这里，我们演示了两个模块（红色和棕色模块）到 Cytoscape 的输出。

```{r}
# Recalculate topological overlap if needed
TOM = TOMsimilarityFromExpr(datExpr, power = 6);
# Read in the annotation file
annot = read.csv(file = "GeneAnnotation.csv");
# Select modules
modules = c("brown", "red");
# Select module probes
probes = names(datExpr)
inModule = is.finite(match(moduleColors, modules));
modProbes = probes[inModule];
modGenes = annot$gene_symbol[match(modProbes, annot$substanceBXH)];
# Select the corresponding Topological Overlap
modTOM = TOM[inModule, inModule];
dimnames(modTOM) = list(modProbes, modProbes)
# Export the network into edge and node list files Cytoscape can read
cyt = exportNetworkToCytoscape(
  modTOM,
  edgeFile = paste("CytoscapeInput-edges-", paste(modules, collapse="-"), ".txt", sep=""),
  nodeFile = paste("CytoscapeInput-nodes-", paste(modules, collapse="-"), ".txt", sep=""),
  weighted = TRUE,
  threshold = 0.02,
  nodeNames = modProbes,
  altNodeNames = modGenes,
  nodeAttr = moduleColors[inModule])
```

请注意，Cytoscape 的网络输入涉及更多一些，用户应注意选择所有必要的选项，以便正确解释 edge 和 node 文件。建议读者参阅 Cytoscape 文档以获取所有必要的详细信息。








