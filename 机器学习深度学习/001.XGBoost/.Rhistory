return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
head(seurat_obj)
module1 <- c('M18_AID-c','M18_M2-c','M18_AUD-i','M18_CPU-i','M18_S1-i',
'M18_RSP-i','M18_V2-i')
module2 <- c('M18_NAc-i','M18_AID-i','M18_BLA-i','M18_ECT-i','M18_LEnt-i')
module3 <- c('M18_CPU-c','M18_Cg-c','M18_NAc-c','M18_mPFC-c')
head(seurat_obj@meta.data[,module1])
rowMeans(seurat_obj@meta.data[,module1])
module1 <- c('M18_AID-c','M18_M2-c','M18_AUD-i','M18_CPU-i','M18_S1-i',
'M18_RSP-i','M18_V2-i')
module2 <- c('M18_NAc-i','M18_AID-i','M18_BLA-i','M18_ECT-i','M18_LEnt-i')
module3 <- c('M18_CPU-c','M18_Cg-c','M18_NAc-c','M18_mPFC-c')
seurat_obj$module1 <- rowMeans(seurat_obj@meta.data[,module1])
seurat_obj$module2 <- rowMeans(seurat_obj@meta.data[,module2])
seurat_obj$module3 <- rowMeans(seurat_obj@meta.data[,module3])
head(seurat_obj)
seurat_obj <- SetupForWGCNA(
seurat_obj,
gene_select = "fraction",
fraction = 0.05,
wgcna_name = "M18_IT"
)
length(seurat_obj@misc$M18_IT$wgcna_genes)
seurat_obj <- MetacellsByGroups(
seurat_obj = seurat_obj,
group.by = c('Ex_cluster'),
k = 25,
max_shared = 10,
ident.group = 'Ex_cluster'
)
seurat_obj <- NormalizeMetacells(seurat_obj)
m_obj <- GetMetacellObject(seurat_obj)
ncol(m_obj)
M18_Barcode_counts <- seurat_obj@meta.data[,c(M18_Barcode,'module1','module2',
'module3')]
M18_meta_Barcode_counts <- matrix(nrow = nrow(m_obj@meta.data),
ncol = ncol(M18_Barcode_counts))
rownames(M18_meta_Barcode_counts) <- rownames(m_obj@meta.data)
colnames(M18_meta_Barcode_counts) <- colnames(M18_Barcode_counts)
for (i in 1:nrow(M18_meta_Barcode_counts)){
cells_merged_i <- strsplit(m_obj$cells_merged[i], split = ',', fixed = T)[[1]]
M18_meta_Barcode_counts[i,] <- colMeans(M18_Barcode_counts[cells_merged_i,])
}
seurat_obj@misc$M18_IT$wgcna_metacell_obj@meta.data <- cbind(seurat_obj@misc$M18_IT$wgcna_metacell_obj@meta.data, M18_meta_Barcode_counts)
seurat_obj <- SetDatExpr(
seurat_obj,
assay = 'RNA',
slot = 'data'
)
dim(seurat_obj@misc$M18_IT$datExpr)
seurat_obj <- ConstructNetwork(
seurat_obj,
soft_power=4,
tom_name = 'M18_IT',
deepSplit = 4,
minModuleSize = 100,
mergeCutHeight = 0.2
)
seurat_obj <- ModuleEigengenes(
seurat_obj
)
seurat_obj <- ModuleConnectivity(
seurat_obj
)
seurat_obj <- ModuleConnectivity(
seurat_obj
)
head(seurat_obj@misc$M18_IT$MEs)
head(seurat_obj@misc$M18_IT$wgcna_modules)
setwd('F:/1.课题/1.神经环路/4.Newdata/code/')
library(Seurat)
library(ggplot2)
Install.packages('xfun', dependencies=TRUE)
install.packages('xfun', dependencies=TRUE)
library(pheatmap)
library(ggplot2)
allen_proj_merge <- read.csv('connectivity_merge.csv',row.names = 1)
#allen_proj_merge <- t(round(apply(allen_proj_merge,1,function(x){x/max(x)}),2))
#for (i in 1:nrow(allen_proj_merge)){
#  allen_proj_merge[rownames(allen_proj_merge)[i],rownames(allen_proj_merge)[i]] <- NA
#}
row_order <- c('ECT','BLA','VIS','AUD','SSp','RSP','AId','ENT')
p_allen <- pheatmap(allen_proj_merge[row_order,],
cluster_rows = T, cluster_cols = T,
breaks = seq(0,0.5,0.01),
color = colorRampPalette(c("navy", "white","firebrick3"))(50))
inject_area <- c('RSP','ENT','AId','VIS','AUD','SSp','ECT','BLA')
proj_area <- c('SSp','AUD','VIS','AId','RSP','ECT','ENT','BLA','CP','ACB')
module1 <- c('VIS','RSP','SSp','AUD','CP')
module2 <- c('AId','ACB','ECT','ENT','BLA')
link <- matrix(nrow = length(inject_area)*length(proj_area), ncol = 6)
colnames(link) <- c('areaA','moduleA','areaB','moduleB','value','type')
index <- 1
for (i in 1:length(inject_area)){
for (j in 1:length(proj_area)){
link[index,'areaA'] <- inject_area[i]
if (inject_area[i] %in% module1){
link[index,'moduleA'] <- 'module1'
}else{
link[index,'moduleA'] <- 'module2'
}
link[index,'areaB'] <- proj_area[j]
if (proj_area[i] %in% module1){
link[index,'moduleB'] <- 'module1'
}else{
link[index,'moduleB'] <- 'module2'
}
link[index,'value'] <- allen_proj_merge[inject_area[i],proj_area[j]]
if (link[index,'moduleA']==link[index,'moduleB']){
link[index,'type'] <- 'within module'
}else{
link[index,'type'] <- 'across module'
}
index <- index + 1
}
}
library(tidyverse)
library(viridis)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)
library(tidyverse)
library(viridis)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)
unique(link$type)
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")))
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
install.packages('htmltools')
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
install.packages("htmltools")
library(Seurat)
library(data.table)
library(cowplot)
library(ggplot2)
library(SingleR)
library(celldex)
library(DoubletFinder)
library(dplyr)
library(ggrepel)
ref <- celldex::HumanPrimaryCellAtlasData()
ref <- celldex::HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
all.inte <- readRDS('all.inte.rds')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'Maintype')
all.inte <- FindClusters(all.inte, resolution = 0.8)
DefaultAssay(all.inte) <- 'inte'
DefaultAssay(all.inte) <- 'integrated'
all.inte <- FindClusters(all.inte, resolution = 0.8)
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
all.inte <- FindNeighbors(all.inte, reduction = "pca", dims = 1:30)
all.inte <- FindClusters(all.inte, resolution = 1)
all.inte <- RunUMAP(all.inte, reduction = "pca", dims = 1:30)
all.inte <- RunTSNE(all.inte, reduction = "pca", dims = 1:30)
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
head(all.inte)
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'SingleR')
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
install.packages('cli')
install.packages("cli")
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(celldex)
library(Seurat)
library(data.table)
library(cowplot)
library(ggplot2)
library(SingleR)
library(celldex)
library(DoubletFinder)
library(dplyr)
library(ggrepel)
all.inte <- readRDS('all.inte.rds')
ref <- celldex::HumanPrimaryCellAtlasData()
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
remove. packages('cli')
remove.packages('cli')
remove.packages(cli)
install.packages("cli")
devtools::install_github('dviraran/SingleR')
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
options(download.file.method="libcurl")
options(url.method="libcurl")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
options(download.file.method = 'libcurl')
options(url.method='libcurl')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
stringr::str_to_upper('aagcagcttcccatcgttcccttgttaatggtgcttgcgg')
stringr::str_to_upper('agccatcgactgtacaagcacttgctaacagggcattggc')
stringr::str_to_upper('ggcgtatggatgaactgtga')
1+NA
cor(c(1,2,3),c(1,2,3))
cor(c(1,2,3),c(1,2,NA))
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(“clusterProfiler”)
BiocManager::install(”clusterProfiler”)
BiocManager::install("clusterProfiler")
options(download.file.method = 'libcurl')
options(url.method='libcurl')
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler")
options(download.file.method = 'libcurl')
options(url.method='libcurl')
# single-cell analysis package
library(Seurat)
# plotting and data science packages
library(tidyverse)
library(cowplot)
library(patchwork)
# co-expression network analysis packages:
library(WGCNA)
library(hdWGCNA)
# gene enrichment packages
library(enrichR)
library(GeneOverlap)
# using the cowplot theme for ggplot
theme_set(theme_cowplot())
# set random seed for reproducibility
set.seed(12345)
# load the Zhou et al snRNA-seq dataset
seurat_obj <- readRDS('hdWGCNA_object.rds')
# enrichr databases to test
dbs <- c('GO_Biological_Process_2021','GO_Cellular_Component_2021','GO_Molecular_Function_2021')
# perform enrichment tests
seurat_obj <- RunEnrichr(
seurat_obj,
dbs=dbs, # character vector of enrichr databases to test
max_genes = 100 # number of genes per module to test
)
# retrieve the output table
enrich_df <- GetEnrichrTable(seurat_obj)
# make GO term plots:
EnrichrBarPlot(
seurat_obj,
outdir = "enrichr_plots", # name of output directory
n_terms = 10, # number of enriched terms to show (sometimes more show if there are ties!!!)
plot_size = c(5,7), # width, height of the output .pdfs
logscale=TRUE # do you want to show the enrichment as a log scale?
)
# enrichr dotplot
EnrichrDotPlot(
seurat_obj,
mods = "all", # use all modules (this is the default behavior)
database = "GO_Biological_Process_2021", # this has to be one of the lists we used above!!!
n_terms=1 # number of terms for each module
)
# compute cell-type marker genes with Seurat:
Idents(seurat_obj) <- seurat_obj$cell_type
markers <- Seurat::FindAllMarkers(
seurat_obj,
only.pos = TRUE,
logfc.threshold=1
)
# compute marker gene overlaps
overlap_df <- OverlapModulesDEGs(
seurat_obj,
deg_df = markers,
fc_cutoff = 1 # log fold change cutoff for overlap analysis
)
# overlap barplot, produces a plot for each cell type
plot_list <- OverlapBarPlot(overlap_df)
# stitch plots with patchwork
wrap_plots(plot_list, ncol=3)
# plot odds ratio of the overlap as a dot plot
OverlapDotPlot(
overlap_df,
plot_var = 'odds_ratio') +
ggtitle('Overlap of modules & cell-type markers')
devtools::install_github("tractatus/wholebrain", INSTALL_opts=c("--no-multiarch"))
devtools::install_github("tractatus/wholebrain", INSTALL_opts=c("--no-multiarch"))
library(ggplot2)
devtools::install_github("tractatus/wholebrain", args="--no-multiarch")
devtools::install_github("tractatus/wholebrain", dependencies = TRUE, INSTALL_opts = c("--no-multiarch"))
remotes::install_github("tractatus/wholebrain", dependencies = TRUE, INSTALL_opts = c("--no-multiarch"))
library(rstan)
model<-'data{
int N;
real y[N];
}
parameters{
real mu;
real sigma;
}
model{
y ~ normal(mu, sigma);
}'
model_data <- list( y = rnorm(10), N = 10  )
fit <- stan(model_code = model, data = model_data, iter = 4000, chains =4)
install.packages("survminer")
setwd("F:/Github/Bioinformatics-Tools/机器学习深度学习/001.XGBoost")
require(xgboost)
require(Matrix)
require(data.table)
if (!require('vcd')) {
install.packages('vcd')
}
data(Arthritis)
df <- data.table(Arthritis, keep.rownames = FALSE)
head(df)
##    ID Treatment  Sex Age Improved
## 1: 57   Treated Male  27     Some
## 2: 46   Treated Male  29     None
## 3: 77   Treated Male  30     None
## 4: 17   Treated Male  32   Marked
## 5: 36   Treated Male  46   Marked
## 6: 23   Treated Male  58   Marked
str(df)
head(df[, AgeDiscret := as.factor(round(Age / 10, 0))])
head(df[, AgeCat := as.factor(ifelse(Age > 30, "Old", "Young"))])
df[,ID:=NULL]
levels(df[,Treatment])
## [1] "Placebo" "Treated"
sparse_matrix <- sparse.model.matrix(Improved ~ ., data = df)[, -1]
head(sparse_matrix)
output_vector <- df[, Improved] == "Marked"
bst <- xgboost(data = sparse_matrix, label = output_vector, max_depth = 4,
eta = 1, nthread = 2, nrounds = 10, objective = "binary:logistic")
importance <- xgb.importance(feature_names = colnames(sparse_matrix), model = bst)
head(importance)
xgb.plot.importance(importance_matrix = importance)
c2 <- chisq.test(df$Age, output_vector)
print(c2)
c2 <- chisq.test(df$AgeDiscret, output_vector)
print(c2)
c2 <- chisq.test(df$AgeCat, output_vector)
print(c2)
